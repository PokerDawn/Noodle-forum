{"version":3,"file":"js/359.0202c964.js","mappings":"uLAKA,cAAeA,EAAAA,EAAAA,IAAgB,CAC3BC,QACI,MAAMC,GAAQC,EAAAA,EAAAA,MACRC,GAAQ,IAAIC,MAAQC,qBAAuB,KAAO,IAAID,MAAQE,qBAC9DC,GAASC,EAAAA,EAAAA,IAAS,CACpBC,IAAKR,EAAMS,MAAMD,IACjBE,SAAUV,EAAMS,MAAMC,SACtBC,QAAS,KACTC,KAAMV,EACNW,KAAMC,QACNC,SAAS,KACTC,OAAOhB,EAAMS,MAAMO,SAEjBC,EAAaC,MAAOC,EAAgBC,KACtC,MAAQC,KAAMC,SAAcC,EAAAA,EAAAA,IAAiBJ,EAAQC,GAElDN,MAAMU,KAAKlB,EAAOO,QAAQC,MAAMU,KAAKF,EAAID,KAAKI,WAC7CnB,EAAOO,KAAOS,EAAID,KAAKI,SAEd,KAAVH,EAAII,MACHC,YAAW,KACP,MAAMC,EAAKC,SAASC,cAAc,gBAC/BF,EAAIG,aAAaH,EAAII,YAAYJ,EAAIK,cACxCC,GACH,GACC,IACL,EAICC,EAAOjB,UACT,MAAMkB,EAAG,CACL5B,IAAIF,EAAOE,IACXE,SAASJ,EAAOI,SAChBC,QAAQL,EAAOK,QACfC,KAAKN,EAAOM,KACZI,OAAOhB,EAAMS,MAAMO,SAEfK,KAAMC,SAAce,EAAAA,EAAAA,IAAiBD,GAC7C,GAAgB,KAAZd,EAAII,KAIJ,OAHApB,EAAOK,QAAU,KACjBM,EAAW,EAAG,KACdiB,IACOI,EAAAA,GAAAA,QAAkB,OAC5B,EAGCJ,EAAa,KAChBP,YAAW,KACV,MAAMY,EAAKV,SAASC,cAAc,gBAClCU,OAAOC,SAAS,EAAEF,EAAIR,aAAtB,GACC,IAHF,EAgBH,OAVAW,EAAAA,EAAAA,KAAU,KACNzB,EAAW,EAAG,IACdiB,IACA5B,EAAOS,SAAW4B,aAAY,KAC1B1B,EAAW,EAAG,IAAd,GACF,IAFF,KAIJ2B,EAAAA,EAAAA,KAAgB,KACZC,cAAcvC,EAAOS,SAArB,IAEG,KAAM,eAAN,MACQ,YADR,uBAEY,iBAFZ,uBAGgB,qDAHhB,2CAIgB,0DAJhB,MAIgF,eAJhF,CAKMT,EAAOO,KAAKiC,KAAKC,GACbA,EAAKvC,KAAKR,EAAMS,MAAMD,KAAtB,qBACkB,gBADlB,uBAEsB,mBAFtB,4BAGsB,wBAHtB,uBAI0B,iBAJ1B,CAI2CuC,EAAKpC,eAJhD,qBAQc,gBARd,yBASoB,kBATpB,qBAS+CoC,EAAK/B,OATpD,IASgE,IAThE,8BAUkB,kBAVlB,yBAWoB,gBAXpB,CAWoC+B,EAAKrC,UAXzC,qCAWgE,cAXhE,CAW8EqC,EAAKnC,UAXnF,qBAYkB,uBAZlB,uBAa0B,gBAb1B,CAa0CmC,EAAKpC,qBAnBzD,qBA2BgB,cA3BhB,MA2BoC,IA3BpC,4BA4ByB,gBA5BzB,MA4BgDL,EAAOK,QA5BvD,QA4B0EqC,GAAa1C,EAAOK,QAAWqC,EAAEC,OAA4BC,OA5BvI,4BA6BoB,0CA7BpB,0BA8B2B,cA9B3B,QA8BkDf,GA9BlD,yBAoCV,G","sources":["webpack://vue3_springboot/./src/components/chat.tsx"],"sourcesContent":["import { defineComponent, nextTick, onBeforeUnmount, onDeactivated, onMounted, onUnmounted, reactive, ref } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport { ElMessage } from \"element-plus\";\r\nimport \"../css/chat.css\"\r\nimport { selectMessageAPI, uploadMessageAPI } from \"@/api/api\";\r\nexport default defineComponent({\r\n    setup() {\r\n        const store = useStore()\r\n        const date = (new Date()).toLocaleDateString() + \" \" + (new Date()).toLocaleTimeString()\r\n        const result = reactive({\r\n            uid: store.state.uid,\r\n            username: store.state.username,\r\n            content: null,\r\n            time: date,\r\n            list: Array(),\r\n            Interval:null,\r\n            avatar:store.state.avatar\r\n        })\r\n        const getMessage = async (number: number, size: number) => {\r\n            const { data: res } = await selectMessageAPI(number, size)\r\n            \r\n            if(Array.from(result.list)!==Array.from(res.data.records)){\r\n                result.list = res.data.records\r\n            }\r\n            if(res.code==200){\r\n                setTimeout(()=>{\r\n                    const dom =document.querySelector(\".message_box\")\r\n                    if(dom.clientHeight+dom.scrollTop===dom.scrollHeight){\r\n                    handleScroll()\r\n                }\r\n                },100)\r\n            }\r\n            \r\n            \r\n        }\r\n        const send = async () => {\r\n            const re={\r\n                uid:result.uid,\r\n                username:result.username,\r\n                content:result.content,\r\n                time:result.time,\r\n                avatar:store.state.avatar\r\n            }\r\n            const { data: res } = await uploadMessageAPI(re)\r\n            if (res.code == 200) {\r\n                result.content = null\r\n                getMessage(1, 100)\r\n                handleScroll()\r\n                return ElMessage.success(\"发送成功\")\r\n            }\r\n            \r\n        }\r\n        const handleScroll=()=>{\r\n           setTimeout(()=>{\r\n            const box= document.querySelector(\".message_box\")\r\n            window.scrollTo(0,box.clientHeight)\r\n           },1000)     \r\n        }\r\n\r\n        onMounted(()=>{\r\n            getMessage(1, 50)\r\n            handleScroll()\r\n            result.Interval = setInterval(()=>{\r\n                getMessage(1, 100)\r\n            },5000)\r\n        })\r\n        onBeforeUnmount(()=>{\r\n            clearInterval(result.Interval)\r\n        })\r\n        return () => (\r\n            <div class=\"chat_box\">\r\n                <div class=\"chat_rightbox\">\r\n                    <div style=\"text-align: center; line-height: 50px;color:white\">公共聊天室</div>\r\n                    <div style=\"height: 70%; overflow:auto; border-top: 1px solid white\" class=\"message_box\" >\r\n                    {result.list.map((item) => (\r\n                         item.uid==store.state.uid?(\r\n                                <div class=\"message_box2\">\r\n                                    <div class=\"avatar_message1\"></div>\r\n                                    <div class=\"bubble_message_right\">\r\n                                        <div class=\"green_message\">{item.content}</div>\r\n                                    </div>\r\n                                </div>\r\n                         ):(\r\n                            <div class=\"message_box1\">\r\n                                <label class=\"avatar_message\"><img src={item.avatar} alt=\"\"/></label>\r\n                                <div class=\"message_box111\">\r\n                                <label class=\"message_name\">{item.username} <label style=\"color:gray\">{item.time}</label></label>\r\n                                <div class=\"bubble_message_left\">\r\n                                        <div class=\"blue_message\">{item.content}</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                         )\r\n                        ))\r\n                        }\r\n                    </div>\r\n                    <div style=\"height: 40%\" class=\"\">\r\n                        <textarea class=\"chat_textarea\" value={result.content} onInput={(e: Event) => result.content = (e.target as HTMLInputElement).value}></textarea>\r\n                        <div style=\"text-align: right; padding-right: 10px\">\r\n                            <button class=\"chat_button\" onClick={send}>发送</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n})"],"names":["defineComponent","setup","store","useStore","date","Date","toLocaleDateString","toLocaleTimeString","result","reactive","uid","state","username","content","time","list","Array","Interval","avatar","getMessage","async","number","size","data","res","selectMessageAPI","from","records","code","setTimeout","dom","document","querySelector","clientHeight","scrollTop","scrollHeight","handleScroll","send","re","uploadMessageAPI","ElMessage","box","window","scrollTo","onMounted","setInterval","onBeforeUnmount","clearInterval","map","item","e","target","value"],"sourceRoot":""}