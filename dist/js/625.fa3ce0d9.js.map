{"version":3,"file":"js/625.fa3ce0d9.js","mappings":"2MAgBA,cAAeA,EAAAA,EAAAA,IAAgB,CAC3BC,QACI,MAAMC,GAAQ,IAAIC,MAAQC,qBAAuB,KAAO,IAAID,MAAQE,qBAC9DC,GAAQC,EAAAA,EAAAA,MACRC,EAAO,KACTF,EAAMG,OAAO,YAAa,GAC1BC,EAAAA,EAAAA,KAAY,cAAZ,EAEEC,GAASC,EAAAA,EAAAA,IAAS,CACpBC,MAAO,GACPC,QAAS,GACTC,IAAKT,EAAMU,MAAMD,IACjBE,SAAUX,EAAMU,MAAMC,SACtBC,KAAMhB,EACNiB,MAAM,OAGJC,EAAiB,GACjBC,EAAKC,UACP,GAAsB,IAAlBX,EAAOG,SAAiC,IAAhBH,EAAOE,MAK/B,YAJAU,EAAAA,EAAAA,IAAU,CACNC,KAAM,QACNC,QAAS,cAIjBL,EAAKM,KAAKC,IACNhB,EAAOG,QAAUH,EAAOG,QAAQc,QAAQ,IAAIC,OAAOF,EAAM,KAAM,KAA/D,IAGJ,MAAQG,KAAMC,SAAcC,EAAAA,EAAAA,IAAWrB,GACvCsB,QAAQC,IAAIH,GACI,KAAZA,EAAII,MACJ7B,EAAMG,OAAO,YAAa,GAC1BC,EAAAA,EAAAA,QAAe,gBACfa,EAAAA,EAAAA,IAAU,CACNC,KAAM,UACNC,QAAS,WAGbF,EAAAA,EAAAA,IAAU,CACNC,KAAM,QACNC,QAAS,QAEhB,EAGCW,GAAYC,EAAAA,EAAAA,IAAI,MAChBC,EAAUhB,UACZ,MAAMiB,EAAKC,EAAEC,OAAOC,MAAM,GAC1B,GAA8B,UAA3BH,EAAKf,KAAKmB,UAAU,EAAE,GACrB,OAAOpB,EAAAA,GAAAA,QAAkB,WAE7Ba,EAAUQ,MAAML,EAAKM,KACrB,MAAMC,EAAa,IAAIC,WACvBD,EAAWE,cAAcT,GACzBN,QAAQC,IAAIY,GACZA,EAAWG,OAAS,WAChBtC,EAAOQ,MAAM+B,KAAKvC,MACrB,CAFD,EAIJ,MAAO,KAAM,eAAN,MACQ,eADR,4DAGY,aAHZ,gEAKiB,OALjB,MAK+BA,EAAOE,MALtC,QAKuD2B,GAAa7B,EAAOE,MAAS2B,EAAEC,OAA4BG,OALlH,8BAOY,aAPZ,oEASsBjC,EAAOG,QAT7B,QASgD0B,GAAa7B,EAAOG,QAAW0B,EAAEC,OAA4BG,OAT7G,8BAWY,QAXZ,CAYMR,EAAUQ,MAAMR,EAAUQ,MAAM,UAZtC,sBAaiB,OAbjB,QAaiCN,GAbjC,8BAeY,WAfZ,iDAiB0B9B,GAjB1B,6CAkB0B,IAAMa,EAAGV,IAlBnC,yBAuBV,G","sources":["webpack://vue3_springboot/./src/components/Release.tsx"],"sourcesContent":["import router from \"@/router\";\r\nimport { defineComponent, reactive, ref } from \"vue\";\r\nimport '../css/release.css'\r\nimport { useStore } from \"vuex\";\r\nimport { ReleaseAPI, ImgAPI } from \"@/api/api\";\r\nimport { ElButton, ElMessage, ElUpload } from 'element-plus'\r\n\r\ntype release = {\r\n    title: string,\r\n    context: string,\r\n    uid: Number,\r\n    username: string,\r\n    time: string,\r\n    image?:string,\r\n}\r\n\r\nexport default defineComponent({\r\n    setup() {\r\n        const date = (new Date()).toLocaleDateString() + \" \" + (new Date()).toLocaleTimeString()\r\n        const store = useStore()\r\n        const back = () => {\r\n            store.commit(\"GetActive\", 0)\r\n            router.push('/home/index')\r\n        }\r\n        const result = reactive({\r\n            title: '',\r\n            context: '',\r\n            uid: store.state.uid,\r\n            username: store.state.username,\r\n            time: date,\r\n            image:null,\r\n        })\r\n        //替换脏字\r\n        const list: string[] = []\r\n        const ok = async (result: release) => {\r\n            if (result.context == \"\" || result.title == \"\") {\r\n                ElMessage({\r\n                    type: \"error\",\r\n                    message: \"标题或内容不能为空\"\r\n                })\r\n                return\r\n            }\r\n            list.map((item: string | RegExp) => {\r\n                result.context = result.context.replace(new RegExp(item, \"g\"), \"**\")\r\n            })\r\n\r\n            const { data: res } = await ReleaseAPI(result)\r\n            console.log(res)\r\n            if (res.code == 200) {\r\n                store.commit(\"GetActive\", 0)\r\n                router.replace(\"/home/index\")\r\n                ElMessage({\r\n                    type: \"success\",\r\n                    message: \"发布成功\"\r\n                })\r\n            } else {\r\n                ElMessage({\r\n                    type: \"error\",\r\n                    message: \"发布失败\"\r\n                })\r\n            }\r\n\r\n        }\r\n        const imageName = ref(null)\r\n        const uploadIMG=async (e)=>{\r\n            const file=e.target.files[0]\r\n            if(file.type.substring(0,5)!=='image'){\r\n                return ElMessage.warning(\"只能上传图片！\")\r\n            }\r\n            imageName.value=file.name\r\n            const fileReader = new FileReader()\r\n            fileReader.readAsDataURL(file)\r\n            console.log(fileReader)\r\n            fileReader.onload = function () {\r\n                result.image=this.result\r\n            }\r\n        }\r\n        return () => (\r\n            <div class=\"release_box\">\r\n                <h2>发表</h2>\r\n                <div class=\"input-box\">\r\n                    <label>标题</label>\r\n                    <input type=\"text\" value={result.title} onInput={(e: Event) => result.title = (e.target as HTMLInputElement).value} />\r\n                </div>\r\n                <div class=\"input-box\" >\r\n                    <label>内容</label>\r\n                    <textarea value={result.context} onInput={(e: Event) => result.context = (e.target as HTMLInputElement).value}></textarea>\r\n                </div>\r\n                <div class=\"file\">\r\n                    {imageName.value?imageName.value:'点击上传图片'}\r\n                    <input type=\"file\" onInput={uploadIMG}></input>\r\n                </div>\r\n                <div class=\"btn-box\">\r\n                    <div>\r\n                        <button onClick={back}>返回</button>\r\n                        <button onClick={() => ok(result)}>点击发表</button>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n})"],"names":["defineComponent","setup","date","Date","toLocaleDateString","toLocaleTimeString","store","useStore","back","commit","router","result","reactive","title","context","uid","state","username","time","image","list","ok","async","ElMessage","type","message","map","item","replace","RegExp","data","res","ReleaseAPI","console","log","code","imageName","ref","uploadIMG","file","e","target","files","substring","value","name","fileReader","FileReader","readAsDataURL","onload","this"],"sourceRoot":""}